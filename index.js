const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes } = require('discord.js');
require('dotenv').config();

// Konfiguracja bota
const config = {
    token: process.env.BOT_TOKEN,
    welcomeChannelId: process.env.WELCOME_CHANNEL_ID,
    welcomeMessage: 'Witamy {user} na serwerze Stable Of Souls! üåü\n\nMamy nadziejƒô, ≈ºe znajdziesz tu wszystko czego szukasz. Mi≈Çego pobytu!'
};

// Tworzenie klienta bota
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers // Potrzebne do wykrywania nowych cz≈Çonk√≥w
    ]
});

// Definicja komendy slash
const commands = [
    new SlashCommandBuilder()
        .setName('test')
        .setDescription('Komendy testowe')
        .addSubcommand(subcommand =>
            subcommand
                .setName('welcome')
                .setDescription('Wy≈õlij testowƒÖ wiadomo≈õƒá powitalnƒÖ')
        )
].map(command => command.toJSON());

// Rejestracja komend slash
async function registerCommands() {
    try {
        const rest = new REST({ version: '10' }).setToken(config.token);
        
        console.log('üîÑ Rejestrowanie komend slash...');
        
        // Dla konkretnego serwera (szybsze)
        await rest.put(
            Routes.applicationGuildCommands(client.user.id, '845651993770721300'),
            { body: commands },
        );
        
        console.log('‚úÖ Komendy slash zarejestrowane!');
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd rejestracji komend:', error);
    }
}

// Wydarzenie gdy bot siƒô uruchomi
client.once('ready', async () => {
    console.log(`‚úÖ Bot ${client.user.tag} jest online!`);
    console.log(`üîó Zalogowany na ${client.guilds.cache.size} serwer(ach)`);
    
    // Rejestruj komendy slash
    await registerCommands();
});

// Obs≈Çuga komend slash
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'test') {
        const subcommand = interaction.options.getSubcommand();
        
        if (subcommand === 'welcome') {
            try {
                // Pobieranie kana≈Çu powitalnego
                const welcomeChannel = interaction.guild.channels.cache.get(config.welcomeChannelId);
                
                if (!welcomeChannel) {
                    await interaction.reply({
                        content: '‚ùå Nie znaleziono kana≈Çu powitalnego! Sprawd≈∫ konfiguracjƒô.',
                        ephemeral: true
                    });
                    return;
                }

                // Przygotowanie testowej wiadomo≈õci powitalnej
                const testWelcomeMessage = config.welcomeMessage.replace('{user}', `<@${interaction.user.id}>`);
                
                // Wys≈Çanie testowej wiadomo≈õci
                await welcomeChannel.send(`**[TEST]** ${testWelcomeMessage}`);
                
                await interaction.reply({
                    content: `‚úÖ Wys≈Çano testowƒÖ wiadomo≈õƒá powitalnƒÖ na kana≈Ç ${welcomeChannel}!`,
                    ephemeral: true
                });
                
                console.log(`üß™ ${interaction.user.tag} przetestowa≈Ç wiadomo≈õƒá powitalnƒÖ`);
                
            } catch (error) {
                console.error('‚ùå B≈ÇƒÖd przy testowaniu wiadomo≈õci powitalnej:', error);
                await interaction.reply({
                    content: '‚ùå WystƒÖpi≈Ç b≈ÇƒÖd podczas wysy≈Çania testowej wiadomo≈õci.',
                    ephemeral: true
                });
            }
        }
    }
});

// Wydarzenie gdy kto≈õ do≈ÇƒÖczy na serwer
client.on('guildMemberAdd', async (member) => {
    try {
        // Pobieranie kana≈Çu powitalnego
        const welcomeChannel = member.guild.channels.cache.get(config.welcomeChannelId);
        
        if (!welcomeChannel) {
            console.log('‚ùå Nie znaleziono kana≈Çu powitalnego!');
            return;
        }

        // Przygotowanie wiadomo≈õci powitalnej
        const welcomeText = config.welcomeMessage.replace('{user}', `<@${member.id}>`);
        
        // Wys≈Çanie wiadomo≈õci powitalnej
        await welcomeChannel.send(welcomeText);
        
        console.log(`üëã Powitano nowego cz≈Çonka: ${member.user.tag}`);
        
    } catch (error) {
        console.error('‚ùå B≈ÇƒÖd przy wysy≈Çaniu wiadomo≈õci powitalnej:', error);
    }
});

// Logowanie b≈Çƒôd√≥w
client.on('error', error => {
    console.error('‚ùå B≈ÇƒÖd bota:', error);
});

// Uruchomienie bota
client.login(config.token);